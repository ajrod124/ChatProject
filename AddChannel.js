// Generated by CoffeeScript 1.12.2
(function() {
  var AddChannel, Image, Keyboard, React, ReactNative, StyleSheet, Text, TextInput, TouchableHighlight, View, styles, urls;

  React = require('react');

  ReactNative = require('react-native');

  urls = require('./urls');

  Keyboard = ReactNative.Keyboard, TextInput = ReactNative.TextInput, Text = ReactNative.Text, View = ReactNative.View, StyleSheet = ReactNative.StyleSheet, TouchableHighlight = ReactNative.TouchableHighlight, Image = ReactNative.Image;

  AddChannel = React.createClass({displayName: "AddChannel",
    getInitialState: function() {
      return {
        enableSubmit: false,
        name: '',
        yPos: 20
      };
    },
    componentWillMount: function() {
      this.showListener = Keyboard.addListener('keyboardDidShow', this.keyboardDidShow);
      return this.hideListener = Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);
    },
    componentWillUnmount: function() {
      this.showListener.remove();
      return this.hideListener.remove();
    },
    keyboardDidHide: function() {
      return this.setState({
        yPos: 20
      });
    },
    keyboardDidShow: function(e) {
      return this.setState({
        yPos: e.endCoordinates.height + 20
      });
    },
    submitChannel: function() {
      return fetch(urls.dbServer + '/addChannel/', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: this.state.name
        })
      }).then((function(_this) {
        return function(res) {
          _this.props.onAddChannel(res._bodyText);
          return _this.props.navigator.pop();
        };
      })(this));
    },
    render: function() {
      var opacity;
      opacity = 0;
      if (this.state.enableSubmit) {
        opacity = 1;
      }
      return React.createElement(View, {
        "style": {
          flex: 1
        }
      }, React.createElement(View, {
        "style": styles.header,
        "flexDirection": 'row'
      }, React.createElement(TouchableHighlight, {
        "onPress": ((function(_this) {
          return function() {
            return _this.props.navigator.pop();
          };
        })(this))
      }, React.createElement(Image, {
        "style": styles.arrow,
        "source": require('./img/arrow.png')
      })), React.createElement(View, {
        "style": {
          left: 10
        }
      }, React.createElement(Text, {
        "style": styles.headerText
      }, "Create Text Channel"), React.createElement(Text, {
        "style": styles.headerSubtext
      }, "Stripped Down"))), React.createElement(View, {
        "style": styles.container
      }, React.createElement(Text, {
        "style": styles.bodyText
      }, "CHANNEL NAME"), React.createElement(TextInput, {
        "style": styles.input,
        "onChangeText": ((function(_this) {
          return function(text) {
            return _this.setState({
              name: text,
              enableSubmit: text.length > 0
            });
          };
        })(this)),
        "placeholder": 'Channel Name',
        "placeholderTextColor": '#cccccc',
        "underlineColorAndroid": '#ffffff'
      })), React.createElement(View, {
        "style": [
          styles.submit, {
            opacity: opacity,
            bottom: this.state.yPos
          }
        ]
      }, React.createElement(TouchableHighlight, {
        "onPress": this.submitChannel,
        "disabled": !this.state.enableSubmit
      }, React.createElement(Text, {
        "style": styles.submitText
      }, '\u2714'))));
    }
  });

  styles = StyleSheet.create({
    header: {
      elevation: 5,
      backgroundColor: '#6b7dfa'
    },
    headerText: {
      color: 'white',
      fontSize: 10,
      paddingTop: 5,
      paddingBottom: 2
    },
    headerSubtext: {
      color: 'white',
      padding: 2,
      fontSize: 8
    },
    container: {
      paddingLeft: 10,
      paddingRight: 10,
      elevation: 1,
      backgroundColor: '#f5f5f5',
      flex: 1
    },
    bodyText: {
      padding: 12
    },
    arrow: {
      marginTop: 15,
      marginBottom: 15,
      marginLeft: 20,
      marginRight: 25,
      width: 10,
      height: 10
    },
    input: {
      paddingTop: 4,
      paddingBottom: 4,
      paddingLeft: 10,
      paddingRight: 10,
      borderTopColor: '#fafafa',
      borderTopWidth: 1,
      flexDirection: 'row',
      backgroundColor: '#ffffff',
      elevation: 5
    },
    submitText: {
      color: 'white',
      fontSize: 30,
      paddingTop: 6
    },
    submit: {
      alignItems: 'center',
      elevation: 5,
      position: 'absolute',
      width: 60,
      height: 60,
      right: 20,
      borderRadius: 30,
      backgroundColor: '#6b7dfa'
    }
  });

  module.exports = AddChannel;

}).call(this);
