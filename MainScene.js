// Generated by CoffeeScript 1.12.2
(function() {
  var ChatFeed, Drawer, Header, ListView, MainScene, React, ReactNative, ServerContent, ServerSettings, StyleSheet, Text, TouchableHighlight, UserPane, View, drawerStyles, styles, urls;

  React = require('react');

  ReactNative = require('react-native');

  Drawer = require('react-native-drawer')["default"];

  Header = require('./Header');

  ServerSettings = require('./ServerSettings');

  ServerContent = require('./ServerContent');

  ChatFeed = require('./ChatFeed');

  UserPane = require('./UserPane');

  urls = require('./urls');

  Text = ReactNative.Text, View = ReactNative.View, StyleSheet = ReactNative.StyleSheet, TouchableHighlight = ReactNative.TouchableHighlight, ListView = ReactNative.ListView;

  MainScene = React.createClass({displayName: "MainScene",
    getInitialState: function() {
      return {
        selectedChannel: 0,
        channels: [],
        users: []
      };
    },
    componentWillMount: function() {
      this.getChannels();
      return this.getUsers();
    },
    getChannels: function() {
      return fetch(urls.dbServer + '/getLast50/', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      }).then((function(_this) {
        return function(res) {
          var channels;
          channels = JSON.parse(res._bodyText).res.reverse();
          return _this.setState({
            channels: channels
          });
        };
      })(this));
    },
    getUsers: function() {
      return fetch(urls.dbServer + '/getUsers/', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      }).then((function(_this) {
        return function(res) {
          return _this.setState({
            users: JSON.parse(res._bodyText).res
          });
        };
      })(this));
    },
    updateChannelList: function(list) {
      var channels;
      channels = JSON.parse(list).res.reverse();
      return this.setState({
        channels: channels
      });
    },
    changeChannel: function(index) {
      return this.setState({
        selectedChannel: index
      });
    },
    updateChannel: function(name, message) {
      var channel, channels, i, len;
      channels = this.state.channels;
      for (i = 0, len = channels.length; i < len; i++) {
        channel = channels[i];
        if (channel.name === name) {
          channel.messages.push(message);
        }
      }
      return this.setState({
        channels: channels
      });
    },
    openLeft: function() {
      return this.leftDrawer.open();
    },
    closeLeft: function() {
      return this.leftDrawer.close();
    },
    openRight: function() {
      return this.rightDrawer.open();
    },
    closeRight: function() {
      return this.rightDrawer.close();
    },
    retrieveChannel: function() {
      var channel;
      if (this.state.selectedChannel === this.state.channels.length) {
        channel = {
          name: 'whiteboard',
          messages: []
        };
        return channel;
      } else {
        return this.state.channels[this.state.selectedChannel];
      }
    },
    render: function() {
      if (this.state.users.length > 0 && this.state.channels.length > 0) {
        return React.createElement(Drawer, {
          "ref": ((function(_this) {
            return function(ref) {
              return _this.leftDrawer = ref;
            };
          })(this)),
          "type": "overlay",
          "content": React.createElement(ServerContent, {
            "navigator": this.props.navigator,
            "selectedChannel": this.state.selectedChannel,
            "changeChannel": this.changeChannel,
            "channels": this.state.channels,
            "closeDrawer": this.closeLeft,
            "onAddChannel": this.updateChannelList
          }),
          "tapToClose": true,
          "openDrawerOffset": 0.2,
          "panCloseMask": 0.2,
          "closedDrawerOffset": -3,
          "styles": drawerStyles.left,
          "tweenHandler": ((function(_this) {
            return function(ratio) {
              return {
                main: {
                  opacity: (3 - (ratio * 2)) / 3
                }
              };
            };
          })(this)),
          "side": 'left'
        }, React.createElement(Drawer, {
          "ref": ((function(_this) {
            return function(ref) {
              return _this.rightDrawer = ref;
            };
          })(this)),
          "type": "overlay",
          "content": React.createElement(UserPane, {
            "users": this.state.users,
            "closeDrawer": this.closeRight
          }),
          "tapToClose": true,
          "openDrawerOffset": 0.2,
          "panCloseMask": 0.2,
          "closedDrawerOffset": -3,
          "styles": drawerStyles.right,
          "tweenHandler": ((function(_this) {
            return function(ratio) {
              return {
                main: {
                  opacity: (3 - (ratio * 2)) / 3
                }
              };
            };
          })(this)),
          "side": 'right'
        }, React.createElement(ChatFeed, {
          "whiteboard": this.state.selectedChannel === this.state.channels.length,
          "users": this.state.users,
          "channel": this.retrieveChannel(),
          "openLeft": this.openLeft,
          "openRight": this.openRight,
          "navigator": this.props.navigator,
          "updateChannel": this.updateChannel
        })));
      } else {
        return React.createElement(View, {
          "style": styles.container
        });
      }
    }
  });

  styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#222222'
    }
  });

  drawerStyles = {
    left: {
      drawer: {
        shadowColor: '#000000',
        shadowOpacity: 0.8,
        shadowRadius: 3
      },
      main: {
        paddingLeft: 3
      }
    },
    right: {
      drawer: {
        shadowColor: '#000000',
        shadowOpacity: 0.8,
        shadowRadius: 3
      },
      main: {
        paddingRight: 3
      }
    }
  };

  module.exports = MainScene;

}).call(this);
