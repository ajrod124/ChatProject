// Generated by CoffeeScript 1.12.2
(function() {
  var React, ReactNative, ScrollView, ServerContent, StyleSheet, Text, TouchableHighlight, View, styles;

  React = require('react');

  ReactNative = require('react-native');

  Text = ReactNative.Text, View = ReactNative.View, StyleSheet = ReactNative.StyleSheet, TouchableHighlight = ReactNative.TouchableHighlight, ScrollView = ReactNative.ScrollView;

  ServerContent = React.createClass({displayName: "ServerContent",
    getInitialState: function() {
      return {
        channels: [],
        selectedChannel: 0,
        elements: []
      };
    },
    componentWillMount: function() {
      return this.setState({
        channels: this.props.channels
      }, (function(_this) {
        return function() {
          return _this.populateChannels();
        };
      })(this));
    },
    componentWillReceiveProps: function(nextProps) {
      if (this.props.selectedChannel !== nextProps.selectedChannel) {
        this.setState({
          selectedChannel: nextProps.selectedChannel
        }, (function(_this) {
          return function() {
            return _this.populateChannels();
          };
        })(this));
      }
      if (this.props.channels !== nextProps.channels) {
        return this.setState({
          channels: nextProps.channels
        }, (function(_this) {
          return function() {
            return _this.populateChannels();
          };
        })(this));
      }
    },
    populateChannels: function() {
      var names;
      names = this.state.channels.map((function(_this) {
        return function(channel) {
          return channel.name;
        };
      })(this));
      return this.setState({
        elements: names.map(this.renderRow)
      });
    },
    selectChannel: function(i) {
      this.props.changeChannel(i);
      return this.props.closeDrawer();
    },
    renderRow: function(name, i) {
      var style;
      if (this.state.selectedChannel === i) {
        style = styles.selected;
      } else {
        style = styles.nomal;
      }
      return React.createElement(View, {
        "key": i,
        "flexDirection": 'row'
      }, React.createElement(TouchableHighlight, {
        "onPress": this.selectChannel.bind(this, i),
        "style": style
      }, React.createElement(Text, {
        "style": [
          styles.text, {
            padding: 12
          }
        ]
      }, '#' + name)));
    },
    openAddChannel: function() {
      this.props.navigator.onAddChannel = this.props.onAddChannel;
      return this.props.navigator.push({
        name: 'addchannel'
      });
    },
    render: function() {
      return React.createElement(View, {
        "style": styles.container
      }, React.createElement(View, {
        "style": styles.header
      }, React.createElement(Text, {
        "style": [
          styles.text, {
            padding: 13.5
          }
        ]
      }, "Stripped Down")), React.createElement(ScrollView, null, React.createElement(View, {
        "style": {
          flexDirection: 'row',
          justifyContent: 'space-between'
        }
      }, React.createElement(Text, {
        "style": [
          styles.text, {
            padding: 10
          }
        ]
      }, "TEXT CHANNELS"), React.createElement(TouchableHighlight, {
        "onPress": this.openAddChannel,
        "style": {
          right: 6
        }
      }, React.createElement(Text, {
        "style": [
          styles.text, {
            fontSize: 20,
            padding: 4
          }
        ]
      }, "+"))), this.state.elements, React.createElement(View, {
        "style": {
          flexDirection: 'row',
          justifyContent: 'space-between'
        }
      }, React.createElement(Text, {
        "style": [
          styles.text, {
            padding: 10
          }
        ]
      }, "WHITEBOARD CHANNEL")), React.createElement(View, {
        "flexDirection": 'row'
      }, React.createElement(TouchableHighlight, {
        "onPress": this.selectChannel.bind(this, this.state.channels.length),
        "style": styles.normal
      }, React.createElement(Text, {
        "style": [
          styles.text, {
            padding: 12
          }
        ]
      }, '#whiteboard')))));
    }
  });

  styles = StyleSheet.create({
    header: {
      flexDirection: 'row',
      backgroundColor: '#282828'
    },
    container: {
      flex: 1,
      flexDirection: 'column',
      backgroundColor: '#222222'
    },
    text: {
      fontSize: 12,
      color: '#FFFFFF'
    },
    selected: {
      flex: 1,
      backgroundColor: '#181818',
      borderLeftWidth: 2,
      borderLeftColor: '#6b7dfa'
    },
    normal: {
      flex: 1,
      borderLeftWidth: 2,
      borderLeftColor: '#222222'
    }
  });

  module.exports = ServerContent;

}).call(this);
